" Set the leader
nnoremap <SPACE> <NOP>
let mapleader="\<SPACE>"

" Syntax
syntax on

" Enable filetype plugin
filetype plugin on

" Use visual bell instead of beeping
set visualbell

" Turn of compatibility
set nocompatible

" Menu
set wildmenu

" Numbering
set number
set relativenumber

" Status Line
set laststatus=2
set showcmd

" Searching
set path+=**
set wildignore+=**/node_modules/**
set wildignore+=**/third_party/**
set wildignore+=**/static/**

" Tab settings
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Enable backspace
set backspace=indent,eol,start

" Try to use the system clipboard
set clipboard=unnamed

" Unsaved buffers
set hidden

" Line length rule
set colorcolumn=88

" Key mappings
" Get a better <ESC>
inoremap jj <ESC>
"Keep split when deleting buffer
nnoremap <LEADER>bd :bp\|bd #<CR>
" Make window keys work under browser which hijacks C-W
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-L> <C-W>l
noremap <C-H> <C-W>h

" Commands
" Close all buffers
command -bar CloseAllBuffers bufdo bd

" Plugins
if empty(glob("~/.vim/autoload/plug.vim"))
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" File Tree
Plug 'preservim/nerdtree'
" File Finding
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" Status Line
Plug 'itchyny/lightline.vim'
" Git
Plug 'tpope/vim-fugitive'
" Ag
Plug 'rking/ag.vim'
" Commenting
Plug 'scrooloose/nerdcommenter'
" Colour scheme
Plug 'nanotech/jellybeans.vim'
" Language server
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
" Autocomplete
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Vimspector (Debugger)
Plug 'puremourning/vimspector'
call plug#end()

" Plugin config

" FZF
" Get back the file finder
nnoremap <C-P> :Files<CR>

" NERDTree
" Open NERDTree at the current file
nnoremap <LEADER>p :call SmartNERDTree()<CR>

function! SmartNERDTree()
    if @% == ""
        NERDTreeToggle
    else
        NERDTreeFind
    endif
endfun

" NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" Asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup() : "\<CR>"

" LSP
" 'g' for go
nmap <LEADER>gd :LspDefinition<CR>
nmap <LEADER>gs :rightbelow LspDefinition<CR>
nmap <LEADER>gv :rightbelow vertical LspDefinition<CR>
nmap <LEADER>ge :LspNextError<CR>
nmap <LEADER>gw :LspNextWarning<CR>
nmap <LEADER>gf :LspNextDiagnostic<CR>
nmap <LEADER>gr :LspNextReference<CR>
" 'f' for fix
nmap <LEADER>ff :LspCodeActionSync<CR>
nmap <LEADER>fr :LspRename<CR>
" 's' for show
nmap <LEADER>sf :LspDocumentDiagnostics<CR>
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')
let g:lsp_settings = {
\   "filetype": {"python": "pyls-all"},
\   "pyls-all": {
\     "workspace_config": {
\         "pyls": {
\             "configurationSources": ["pycodestyle"],
\             "plugins": {
\                 "pycodestyle": {
\                     "enabled": v:true,
\                     "maxLineLength": 88,
\                 },
\                 "black": {"enable": v:true},
\                 "autopep8": {"enable": v:true},
\             },
\         },
\     },
\   },
\ }

" Vimspector
let g:vimspector_enable_mappings = 'HUMAN'
nnoremap <LEADER>dd :call vimspector#Launch()<CR>
nnoremap <LEADER>dx :VimspectorReset<CR>
nnoremap <LEADER>de :VimspectorEval
nnoremap <LEADER>dw :VimspectorWatch
nmap <LEADER>dc <PLUG>VimspectorContinue
nmap <LEADER>ds <PLUG>VimspectorStop
nmap <LEADER>db <PLUG>VimspectorToggleBreakpoint
nmap <LEADER>di <PLUG>VimspectorStepInto
nmap <LEADER>do <PLUG>VimspectorStepOver
nmap <LEADER>du <PLUG>VimspectorStepOut

" Colour scheme
" set t_Co=256
:colorscheme jellybeans

" Source a local vimrc if it exists
if filereadable(expand("~/.vimrc.custom"))
    source ~/.vimrc.custom
endif
